{"version":3,"sources":["logo.svg","RobotComponent.js","LoginComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RobotComponent","props","characterName","src","storyline","name","population","nam","LoginComponent","onSubmit","onIdInput","type","placeholder","value","App","event","preventDefault","console","log","target","id","setState","state","array","Math","ceil","random","Promise","all","map","url","fetch","then","obj","json","this","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,qICiD5BC,G,iBA9CQ,SAACC,GACpB,OACI,6BACI,yCAAeA,EAAMC,eACrB,yBAAKC,IAAG,+BAA0BF,EAAMC,cAAhC,mBACR,0DACA,6BAEA,wCAEA,2BAESD,EAAMG,UAAU,GAAGC,KAAO,8BAAgCJ,EAAMG,UAAU,GAAGC,KAAO,uCAG7F,2BAESJ,EAAMG,UAAU,GAAGC,KAAO,4CAA8CJ,EAAMG,UAAU,GAAGC,KAAO,2BAA8BJ,EAAMG,UAAU,GAAGE,WAAa,YAAa,2DAGlL,0CAEJ,2BAESL,EAAMG,UAAU,GAAGC,MAAQJ,EAAMG,UAAU,GAAGC,OAASJ,EAAMG,UAAU,GAAGG,IAAON,EAAMG,UAAU,GAAGC,KAAO,wBAA0B,0BAI9I,+CAEA,2BAESJ,EAAMG,UAAU,GAAGC,KAAO,iCAAmCJ,EAAMG,UAAU,GAAGC,KAAO,sCAAuC,iEAAmEJ,EAAMG,UAAU,GAAGC,KAAO,KAGpO,2BAESJ,EAAMG,UAAU,GAAGC,KAAO,0CAA4CJ,EAAMG,UAAU,GAAGC,KAAO,0BAA4B,yDCpBlIG,EAlBQ,SAACP,GACpB,OACI,6BACI,0BAAMI,KAAK,OAAOI,SAAUR,EAAMS,WAC9B,2BACAC,KAAK,OACLC,YAAY,2BACZP,KAAK,OAEL,2BACAM,KAAK,SACLE,MAAM,QACNR,KAAK,cC6ENS,E,YAnFb,aAAc,IAAD,8BACX,+CA2BFJ,UAAY,SAACK,GACXA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,GAAGP,OAC5B,EAAKQ,SAAS,CAACnB,cAAea,EAAMI,OAAOC,GAAGP,SA7B9C,EAAKS,MAAQ,CACXpB,cAAe,GACfE,UAAW,CACT,GACA,GACA,GACA,GACA,KATO,E,iFAaO,IAAD,OACXmB,EAAQ,CAAC,gCAAD,OACoBC,KAAKC,KAAmB,GAAdD,KAAKE,UADnC,2CAEmBF,KAAKC,KAAmB,GAAdD,KAAKE,UAFlC,2CAGmBF,KAAKC,KAAmB,GAAdD,KAAKE,UAHlC,8CAIsBF,KAAKC,KAAmB,GAAdD,KAAKE,UAJrC,6CAKqBF,KAAKC,KAAmB,GAAdD,KAAKE,UALpC,MAQdC,QAAQC,IAAIL,EAAMM,KAAI,SAAAC,GAAG,OAAIC,MAAMD,GAClCE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,cAEhBF,MAAK,SAAAC,GAAG,OAAI,EAAKZ,SAAS,CAACjB,UAAW6B,S,+BAWvC,OAAIE,KAAKb,MAAMpB,cAUX,yBAAKkC,UAAU,OACb,kBAAC,EAAD,CACEhC,UAAW+B,KAAKb,MAAMlB,UACtBF,cAAeiC,KAAKb,MAAMpB,iBAX9B,yBAAKkC,UAAU,OACb,kBAAC,EAAD,CACA1B,UAAWyB,KAAKzB,iB,GAzCR2B,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.09097699.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport Tachyons from 'tachyons';\r\n\r\nconst RobotComponent = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>Greetings {props.characterName}</h1>\r\n            <img src={`https://robohash.org/${props.characterName}?size=200x200`}/>\r\n            <h3>This is your mission brief</h3>\r\n            <hr/>\r\n\r\n            <h2>Mission:\r\n            </h2>\r\n            <p>                \r\n                {\r\n                    (props.storyline[1].name)? \"Your mission is to extract \" + props.storyline[1].name : \"No missions available at the moment\"\r\n                }\r\n            </p>\r\n            <p>\r\n                {\r\n                    (props.storyline[0].name)? \"We believe they are being held on planet \" + props.storyline[0].name + \", kindapped and held by \" +  props.storyline[0].population + \" people. \": \"Find yourself a pub and grab a pint of fresh motor oil.\"\r\n                }\r\n            </p>\r\n                <h2>Your Team:\r\n            </h2>\r\n            <p>                \r\n                {\r\n                    (props.storyline[2].name && props.storyline[2].name !== props.storyline[1].nam )? props.storyline[2].name + \" will be joining you.\" : \"This is a solo mission\"\r\n                }\r\n            </p>\r\n\r\n            <h2>Transportation:\r\n            </h2>\r\n            <p>                \r\n                {\r\n                    (props.storyline[3].name)? \"You will be provided with the \" + props.storyline[3].name + \" starship to reach your destination\": \"Unfortunately, no starship is available. Find a way to get to \" + props.storyline[0].name + \".\"\r\n                }\r\n            </p>\r\n            <p>\r\n                {\r\n                    (props.storyline[4].name)? \"Once on the planet, you are to use the \" + props.storyline[4].name + \" vehicle to get around.\" : \"Once on the planet, you are to get around on foot.\"\r\n                }\r\n\r\n            </p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RobotComponent ;","import React from 'react';\r\n\r\nconst LoginComponent = (props) => {\r\n    return (\r\n        <div>\r\n            <form name=\"form\" onSubmit={props.onIdInput}>\r\n                <input \r\n                type=\"text\" \r\n                placeholder=\"Type your secret SW-R ID\"\r\n                name=\"id\" \r\n                />\r\n                <input\r\n                type=\"submit\" \r\n                value=\"Login\"\r\n                name=\"button\"\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default LoginComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RobotComponent from './RobotComponent';\nimport LoginComponent from './LoginComponent';\nimport Tachyons from 'tachyons';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      characterName: \"\",\n      storyline: [\n        {},\n        {},\n        {},\n        {},\n        {},\n      ]\n    }\n  }\n  componentDidMount(){\n    const array = [\n      `https://swapi.co/api/planets/${Math.ceil(Math.random()*61)}/`,\n      `https://swapi.co/api/people/${Math.ceil(Math.random()*88)}/`,\n      `https://swapi.co/api/people/${Math.ceil(Math.random()*88)}/`,\n      `https://swapi.co/api/starships/${Math.ceil(Math.random()*17)}/`,\n      `https://swapi.co/api/vehicles/${Math.ceil(Math.random()*57)}/`\n    ]\n\n    Promise.all(array.map(url => fetch(url)\n    .then(obj => obj.json())\n    ))\n    .then(obj => this.setState({storyline: obj}))\n  }\n\n  onIdInput = (event) => {\n    event.preventDefault();\n    console.log(event.target.id.value);\n    this.setState({characterName: event.target.id.value});\n  }\n\n  render(){\n\n    if(!this.state.characterName){\n      return (\n        <div className=\"App\">\n          <LoginComponent \n          onIdInput={this.onIdInput}/>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <RobotComponent\n            storyline={this.state.storyline}\n            characterName={this.state.characterName}\n          />\n        </div>\n      )\n    }\n\n\n\n\n/*     if(this.state.storyline[0].name){\n      return (\n        <div className=\"App\">\n          <br/>\n          <LoginComponent/>\n          <RobotComponent \n          character={this.state.character}\n          storyline={this.state.storyline}\n          />\n        </div>\n      );\n    }\n    else {\n      return (\n        <h5 className=\"App\">Fetching mission details...</h5>\n      )\n    } */\n\n\n\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}